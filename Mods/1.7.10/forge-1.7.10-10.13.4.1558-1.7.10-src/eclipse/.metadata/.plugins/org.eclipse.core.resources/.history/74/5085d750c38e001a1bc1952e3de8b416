package fr.helios.astral.utils.generation;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.world.World;
import net.minecraft.world.biome.BiomeCache;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.biome.WorldChunkManager;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.IntCache;

public class WorldChunkManagerAstral extends WorldChunkManager
{
	    private GenLayer myGenBiomes;
    	private GenLayer myBiomeIndexLayer;
    	private BiomeCache myBiomeCache;
    	private List <BiomeGenBase>myBiomesToSpawnIn;
    	
    	public WorldChunkManagerAstral()
    	{
    	    this.myBiomeCache = new BiomeCache(this);
    	    this.myBiomesToSpawnIn = new ArrayList<BiomeGenBase>();
            this.myBiomesToSpawnIn.add(StarLands); 
    	}
    	
        public WorldChunkManagerAstral(World world)
        {
            this(world.getSeed(), world.provider.terrainType);
        }

        public List <BiomeGenBase>getBiomesToSpawnIn()
        {
            return this.myBiomesToSpawnIn;
        }
        
        public BiomeGenBase getBiomeGenAt(int x, int z)
        {
            BiomeGenBase biome = this.myBiomeCache.getBiomeGenAt(x, z);
            if(biome == null)
            {
                return BiomeGenBase.hell;
            }
            return biome;
        }
        
        public float[] getRainfall(float[] par1ArrayOfFloat, int par2, int par3, int par4, int par5)
        {
            if (par1ArrayOfFloat == null || par1ArrayOfFloat.length < par4 * par5)
            {
                par1ArrayOfFloat = new float[par4 * par5];
            }
 
            Arrays.fill(par1ArrayOfFloat, 0, par4 * par5, 0.0F);
            return par1ArrayOfFloat;
        }
 
        @SideOnly(Side.CLIENT)
        public float getTemperatureAtHeight(float par1, int par2)
        {
            return par1;
        }
        
        public BiomeGenBase[] loadBlockGeneratorData(BiomeGenBase[] par1ArrayOfBiomeGenBase, int par2, int par3, int par4, int par5)
        {
            return this.getBiomeGenAt(par1ArrayOfBiomeGenBase, par2, par3, par4, par5, true);
        }
 
        public BiomeGenBase[] getBiomeGenAt(BiomeGenBase[] par1ArrayOfBiomeGenBase, int x, int y, int width, int length, boolean cacheFlag)
        {
            IntCache.resetIntCache();
 
            if(par1ArrayOfBiomeGenBase == null || par1ArrayOfBiomeGenBase.length < width * length)
            {
                par1ArrayOfBiomeGenBase = new BiomeGenBase[width * length];
            }
 
            if(cacheFlag && width == 16 && length == 16 && (x & 15) == 0 && (y & 15) == 0)
            {
                BiomeGenBase[] abiomegenbase1 = this.myBiomeCache.getCachedBiomes(x, y);
                System.arraycopy(abiomegenbase1, 0, par1ArrayOfBiomeGenBase, 0, width * length);
                return par1ArrayOfBiomeGenBase;
            }
            else
            {
                int[] aint = this.myBiomeIndexLayer.getInts(x, y, width, length);
 
                for(int i = 0; i < width * length; ++i)
                {
                    if(aint* >= 0)
                    {
                        par1ArrayOfBiomeGenBase* = BiomeGenBase.getBiome(aint*);
                    }
                    else
                    {
                        par1ArrayOfBiomeGenBase* = BiomeGenBase.hell;
                    }
                }
 
                return par1ArrayOfBiomeGenBase;
            }
        }

}
