package fr.helios.astral.utils;

import java.util.Random;

import cpw.mods.fml.common.IWorldGenerator;
import fr.helios.astral.ModAstral;
import net.minecraft.block.Block;
import net.minecraft.init.Blocks;
import net.minecraft.util.MathHelper;
import net.minecraft.world.World;
import net.minecraft.world.chunk.IChunkProvider;

public class WorldGeneration implements IWorldGenerator
{

    @Override
    public void generate(Random random, int chunkX, int chunkZ, World world, IChunkProvider chunkGenerator, IChunkProvider chunkProvider)
    {
        switch(world.provider.dimensionId)
        {
            case -1:
                generateNether(world, random, chunkX * 16, chunkZ * 16);
               
                break;
                
            case 0:
                generateSurface(world, random, chunkX * 16, chunkZ * 16);
                
                break;
                
            case 1:
                generateEnd(world, random, chunkX * 16, chunkZ * 16);
               
                break;
        }
    }

    private void generateEnd(World world, Random random, int i, int j)
    {
        
    }

    private void generateSurface(World world, Random random, int i, int j)
    {
        this.addOreSpawn(ModAstral.lumiere_pur, 0, Blocks.stone, world, random, x, z, 16, 16, 30, 2, 6, 12);
    }

    private void generateNether(World world, Random random, int i, int j)
    {
        
    }
    
    public void addOreSpawn(Block block, int metadata, Block target, World world, Random random, int blockXPos, int blockZPos, int maxX, int maxZ, int maxVeinSize, int chanceToSpawn, int minY, int maxY )
    {
        assert maxY > minY :;
            assert maxX > 0 && maxX <= 16 :;
                assert minY > 0 :;
                    assert maxY < 256 && maxY > 0 :;
                        assert maxZ > 0 && maxZ <= 16 :;
    }
    
}
